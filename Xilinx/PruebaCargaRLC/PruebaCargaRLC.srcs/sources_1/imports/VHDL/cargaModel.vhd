-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\carga_HDLGEN\cargaModel.vhd
-- Created: 2018-11-16 16:31:51
-- 
-- Generated by MATLAB 9.4 and HDL Coder 3.12
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 0.0001
-- Target subsystem base rate: 0.0001
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        0.0001
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- Out1                          ce_out        0.0001
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: cargaModel
-- Source Path: carga_HDLGEN/cargaModel
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY cargaModel IS
  PORT( clk                               :   IN    std_logic;
        resetn                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        In1                               :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        ce_out                            :   OUT   std_logic;
        Out1                              :   OUT   std_logic_vector(15 DOWNTO 0)  -- int16
        );
END cargaModel;


ARCHITECTURE rtl OF cargaModel IS

  -- Signals
  SIGNAL enb_const_rate                   : std_logic;
  SIGNAL In1_signed                       : signed(15 DOWNTO 0);  -- int16
  SIGNAL Gain_out1                        : signed(47 DOWNTO 0);  -- sfix48_En10
  SIGNAL s_input_acc_cast                 : signed(31 DOWNTO 0);  -- sfix32_En10
  SIGNAL s_state_out1                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL s_state_out2_1                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL denom_gain2_mul_temp             : signed(63 DOWNTO 0);  -- sfix64_En28
  SIGNAL s_denom_gain2                    : signed(31 DOWNTO 0);  -- sfix32_En10
  SIGNAL s_state_cast                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL denom_gain1_mul_temp             : signed(63 DOWNTO 0);  -- sfix64_En28
  SIGNAL s_denom_gain1                    : signed(31 DOWNTO 0);  -- sfix32_En10
  SIGNAL s_denom_acc_out1                 : signed(31 DOWNTO 0);  -- sfix32_En10
  SIGNAL s_denom_acc_out2                 : signed(31 DOWNTO 0);  -- sfix32_En10
  SIGNAL nume_gain_b0_mul_temp            : signed(63 DOWNTO 0);  -- sfix64_En28
  SIGNAL s_nume_gain_b0                   : signed(31 DOWNTO 0);  -- sfix32_En10
  SIGNAL nume_gain1_mul_temp              : signed(63 DOWNTO 0);  -- sfix64_En28
  SIGNAL s_nume_gain1                     : signed(31 DOWNTO 0);  -- sfix32_En10
  SIGNAL s_nume_acc_out1                  : signed(31 DOWNTO 0);  -- sfix32_En10
  SIGNAL s_output_cast                    : signed(15 DOWNTO 0);  -- int16

BEGIN
  In1_signed <= signed(In1);

  Gain_out1 <= to_signed(238, 32) * In1_signed;

  s_input_acc_cast <= Gain_out1(31 DOWNTO 0);

  enb_const_rate <= clk_enable;

  s_state_out2_process : PROCESS (clk, resetn)
  BEGIN
    IF resetn = '0' THEN
      s_state_out2_1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_const_rate = '1' THEN
        s_state_out2_1 <= s_state_out1;
      END IF;
    END IF;
  END PROCESS s_state_out2_process;


  denom_gain2_mul_temp <= to_signed(266420213, 32) * s_state_out2_1;
  s_denom_gain2 <= denom_gain2_mul_temp(49 DOWNTO 18) + ('0' & (denom_gain2_mul_temp(17) AND (( NOT denom_gain2_mul_temp(63)) OR (denom_gain2_mul_temp(16) OR denom_gain2_mul_temp(15) OR denom_gain2_mul_temp(14) OR denom_gain2_mul_temp(13) OR denom_gain2_mul_temp(12) OR denom_gain2_mul_temp(11) OR denom_gain2_mul_temp(10) OR denom_gain2_mul_temp(9) OR denom_gain2_mul_temp(8) OR denom_gain2_mul_temp(7) OR denom_gain2_mul_temp(6) OR denom_gain2_mul_temp(5) OR denom_gain2_mul_temp(4) OR denom_gain2_mul_temp(3) OR denom_gain2_mul_temp(2) OR denom_gain2_mul_temp(1) OR denom_gain2_mul_temp(0)))));

  s_state_out1_1_process : PROCESS (clk, resetn)
  BEGIN
    IF resetn = '0' THEN
      s_state_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_const_rate = '1' THEN
        s_state_out1 <= s_state_cast;
      END IF;
    END IF;
  END PROCESS s_state_out1_1_process;


  denom_gain1_mul_temp <= to_signed(-534855476, 32) * s_state_out1;
  s_denom_gain1 <= denom_gain1_mul_temp(49 DOWNTO 18) + ('0' & (denom_gain1_mul_temp(17) AND (( NOT denom_gain1_mul_temp(63)) OR (denom_gain1_mul_temp(16) OR denom_gain1_mul_temp(15) OR denom_gain1_mul_temp(14) OR denom_gain1_mul_temp(13) OR denom_gain1_mul_temp(12) OR denom_gain1_mul_temp(11) OR denom_gain1_mul_temp(10) OR denom_gain1_mul_temp(9) OR denom_gain1_mul_temp(8) OR denom_gain1_mul_temp(7) OR denom_gain1_mul_temp(6) OR denom_gain1_mul_temp(5) OR denom_gain1_mul_temp(4) OR denom_gain1_mul_temp(3) OR denom_gain1_mul_temp(2) OR denom_gain1_mul_temp(1) OR denom_gain1_mul_temp(0)))));

  s_denom_acc_out1 <= s_input_acc_cast - s_denom_gain1;

  s_denom_acc_out2 <= s_denom_acc_out1 - s_denom_gain2;

  s_state_cast <= (resize(s_denom_acc_out2(31 DOWNTO 10), 32)) + ('0' & (s_denom_acc_out2(9) AND (( NOT s_denom_acc_out2(31)) OR (s_denom_acc_out2(8) OR s_denom_acc_out2(7) OR s_denom_acc_out2(6) OR s_denom_acc_out2(5) OR s_denom_acc_out2(4) OR s_denom_acc_out2(3) OR s_denom_acc_out2(2) OR s_denom_acc_out2(1) OR s_denom_acc_out2(0)))));

  nume_gain_b0_mul_temp <= to_signed(10114226, 32) * s_state_cast;
  s_nume_gain_b0 <= nume_gain_b0_mul_temp(49 DOWNTO 18) + ('0' & (nume_gain_b0_mul_temp(17) AND (( NOT nume_gain_b0_mul_temp(63)) OR (nume_gain_b0_mul_temp(16) OR nume_gain_b0_mul_temp(15) OR nume_gain_b0_mul_temp(14) OR nume_gain_b0_mul_temp(13) OR nume_gain_b0_mul_temp(12) OR nume_gain_b0_mul_temp(11) OR nume_gain_b0_mul_temp(10) OR nume_gain_b0_mul_temp(9) OR nume_gain_b0_mul_temp(8) OR nume_gain_b0_mul_temp(7) OR nume_gain_b0_mul_temp(6) OR nume_gain_b0_mul_temp(5) OR nume_gain_b0_mul_temp(4) OR nume_gain_b0_mul_temp(3) OR nume_gain_b0_mul_temp(2) OR nume_gain_b0_mul_temp(1) OR nume_gain_b0_mul_temp(0)))));

  nume_gain1_mul_temp <= to_signed(-10114223, 32) * s_state_out1;
  s_nume_gain1 <= nume_gain1_mul_temp(49 DOWNTO 18) + ('0' & (nume_gain1_mul_temp(17) AND (( NOT nume_gain1_mul_temp(63)) OR (nume_gain1_mul_temp(16) OR nume_gain1_mul_temp(15) OR nume_gain1_mul_temp(14) OR nume_gain1_mul_temp(13) OR nume_gain1_mul_temp(12) OR nume_gain1_mul_temp(11) OR nume_gain1_mul_temp(10) OR nume_gain1_mul_temp(9) OR nume_gain1_mul_temp(8) OR nume_gain1_mul_temp(7) OR nume_gain1_mul_temp(6) OR nume_gain1_mul_temp(5) OR nume_gain1_mul_temp(4) OR nume_gain1_mul_temp(3) OR nume_gain1_mul_temp(2) OR nume_gain1_mul_temp(1) OR nume_gain1_mul_temp(0)))));

  s_nume_acc_out1 <= s_nume_gain_b0 + s_nume_gain1;

  s_output_cast <= s_nume_acc_out1(25 DOWNTO 10) + ('0' & (s_nume_acc_out1(9) AND (( NOT s_nume_acc_out1(31)) OR (s_nume_acc_out1(8) OR s_nume_acc_out1(7) OR s_nume_acc_out1(6) OR s_nume_acc_out1(5) OR s_nume_acc_out1(4) OR s_nume_acc_out1(3) OR s_nume_acc_out1(2) OR s_nume_acc_out1(1) OR s_nume_acc_out1(0)))));

  Out1 <= std_logic_vector(s_output_cast);

  ce_out <= clk_enable;

END rtl;

