// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/15/2018 09:57:00"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    PeriodGenerator
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PeriodGenerator_vlg_sample_tst(
	clock,
	enable,
	reset,
	T,
	sampler_tx
);
input  clock;
input  enable;
input  reset;
input [19:0] T;
output sampler_tx;

reg sample;
time current_time;
always @(clock or enable or reset or T)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module PeriodGenerator_vlg_check_tst (
	p,
	sampler_rx
);
input  p;
input sampler_rx;

reg  p_expected;

reg  p_prev;

reg  p_expected_prev;

reg  last_p_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	p_prev = p;
end

// update expected /o prevs

always @(trigger)
begin
	p_expected_prev = p_expected;
end



// expected p
initial
begin
	p_expected = 1'bX;
	p_expected = #999000 1'b0;
end 
// generate trigger
always @(p_expected or p)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected p = %b | ",p_expected_prev);
	$display("| real p = %b | ",p_prev);
`endif
	if (
		( p_expected_prev !== 1'bx ) && ( p_prev !== p_expected_prev )
		&& ((p_expected_prev !== last_p_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p_expected_prev);
		$display ("     Real value = %b", p_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_p_exp = p_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module PeriodGenerator_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg enable;
reg reset;
reg [19:0] T;
// wires                                               
wire p;

wire sampler;                             

// assign statements (if any)                          
PeriodGenerator i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.enable(enable),
	.p(p),
	.reset(reset),
	.T(T)
);

// enable
initial
begin
	enable = 1'b1;
end 

// reset
initial
begin
	reset = 1'b0;
end 
// T[ 19 ]
initial
begin
	T[19] = 1'b0;
end 
// T[ 18 ]
initial
begin
	T[18] = 1'b0;
end 
// T[ 17 ]
initial
begin
	T[17] = 1'b0;
end 
// T[ 16 ]
initial
begin
	T[16] = 1'b0;
end 
// T[ 15 ]
initial
begin
	T[15] = 1'b0;
end 
// T[ 14 ]
initial
begin
	T[14] = 1'b0;
end 
// T[ 13 ]
initial
begin
	T[13] = 1'b0;
end 
// T[ 12 ]
initial
begin
	T[12] = 1'b0;
end 
// T[ 11 ]
initial
begin
	T[11] = 1'b0;
end 
// T[ 10 ]
initial
begin
	T[10] = 1'b0;
end 
// T[ 9 ]
initial
begin
	T[9] = 1'b0;
end 
// T[ 8 ]
initial
begin
	T[8] = 1'b0;
end 
// T[ 7 ]
initial
begin
	T[7] = 1'b0;
end 
// T[ 6 ]
initial
begin
	T[6] = 1'b0;
end 
// T[ 5 ]
initial
begin
	T[5] = 1'b0;
end 
// T[ 4 ]
initial
begin
	T[4] = 1'b1;
	T[4] = #28160000 1'b0;
	T[4] = #40960000 1'b1;
end 
// T[ 3 ]
initial
begin
	T[3] = 1'b1;
	T[3] = #69120000 1'b0;
end 
// T[ 2 ]
initial
begin
	T[2] = 1'b1;
	T[2] = #28160000 1'b0;
	T[2] = #40960000 1'b1;
end 
// T[ 1 ]
initial
begin
	T[1] = 1'b1;
	T[1] = #69120000 1'b0;
end 
// T[ 0 ]
initial
begin
	T[0] = 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #500000 1'b1;
	#500000;
end 

PeriodGenerator_vlg_sample_tst tb_sample (
	.clock(clock),
	.enable(enable),
	.reset(reset),
	.T(T),
	.sampler_tx(sampler)
);

PeriodGenerator_vlg_check_tst tb_out(
	.p(p),
	.sampler_rx(sampler)
);
endmodule

